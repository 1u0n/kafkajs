trigger:
  tags:
    include:
      - v*
  branches:
    include:
      - master

pr:
  branches:
    include:
      - master

variables:
  KAFKA_VERSION: 1.1
  COMPOSE_FILE: docker-compose.1_1.yml

jobs:
  - job: lint
    displayName: Lint
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '8.x'
    - script: bash ./scripts/shouldRunTests.sh && SKIP_TESTS=true && echo "Only non-code has changed!" || test true
    - script: test $SKIP_TESTS && echo "Skipped!" || yarn install
    - script: test $SKIP_TESTS && echo "Skipped!" || yarn lint

  ####### Tests
  - job: test_broker
    displayName: Broker
    dependsOn: lint
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '8.x'
      - script: bash ./scripts/shouldRunTests.sh && SKIP_TESTS=true && echo "Only non-code has changed!" || test true
      - script: test $SKIP_TESTS && echo "Skipped!" || yarn install
      - script: test $SKIP_TESTS && echo "Skipped!" || docker-compose -f ${COMPOSE_FILE} pull
      - script: test $SKIP_TESTS && echo "Skipped!" || yarn test:group:broker:ci

  - job: test_admin
    displayName: Admin
    dependsOn: lint
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '8.x'
      - script: bash ./scripts/shouldRunTests.sh && SKIP_TESTS=true && echo "Only non-code has changed!" || test true
      - script: test $SKIP_TESTS && echo "Skipped!" || yarn install
      - script: test $SKIP_TESTS && echo "Skipped!" || docker-compose -f ${COMPOSE_FILE} pull
      - script: test $SKIP_TESTS && echo "Skipped!" || yarn test:group:admin:ci

  - job: test_producer
    displayName: Producer
    dependsOn: lint
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '8.x'
      - script: bash ./scripts/shouldRunTests.sh && SKIP_TESTS=true && echo "Only non-code has changed!" || test true
      - script: test $SKIP_TESTS && echo "Skipped!" || yarn install
      - script: test $SKIP_TESTS && echo "Skipped!" || docker-compose -f ${COMPOSE_FILE} pull
      - script: test $SKIP_TESTS && echo "Skipped!" || yarn test:group:producer:ci

  - job: test_consumer
    displayName: Consumer
    dependsOn: lint
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '8.x'
      - script: bash ./scripts/shouldRunTests.sh && SKIP_TESTS=true && echo "Only non-code has changed!" || test true
      - script: test $SKIP_TESTS && echo "Skipped!" || yarn install
      - script: test $SKIP_TESTS && echo "Skipped!" || docker-compose -f ${COMPOSE_FILE} pull
      - script: test $SKIP_TESTS && echo "Skipped!" || yarn test:group:consumer:ci

  - job: test_others
    displayName: 'Others (protocol, cluster, network, etc)'
    dependsOn: lint
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '8.x'
      - script: bash ./scripts/shouldRunTests.sh && SKIP_TESTS=true && echo "Only non-code has changed!" || test true
      - script: test $SKIP_TESTS && echo "Skipped!" || yarn install
      - script: test $SKIP_TESTS && echo "Skipped!" || docker-compose -f ${COMPOSE_FILE} pull
      - script: test $SKIP_TESTS && echo "Skipped!" || yarn test:group:others:ci

  ####### Deploy
  - job: npm_release
    displayName: 'NPM release'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags/'))
    dependsOn:
      - lint
      - test_broker
      - test_admin
      - test_producer
      - test_consumer
      - test_others
    pool:
      vmImage: 'Ubuntu 16.04'
    trigger:
      tags:
        include:
          - v*
      branches:
        include:
          - master
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '8.x'

  - job: website_deploy
    displayName: 'Website'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags/'))
    dependsOn:
      - lint
      - test_broker
      - test_admin
      - test_producer
      - test_consumer
      - test_others
    pool:
      vmImage: 'Ubuntu 16.04'
    trigger:
      tags:
        include:
          - v*
      branches:
        include:
          - master
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '8.x'
